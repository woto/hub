# frozen_string_literal: true

# TODO: remove?
class FavoritesOffersSearchQuery
  include ApplicationInteractor
  include Elasticsearch::DSL

  # Code fully covered by tests in spec/lib/queries/offers_search_query_spec.rb
  def call
    if context.q.present?
      search_tokens = Elastic::Tokenize.call(q: context.q).object
      search_string = search_tokens.join(' ')
    end

    if context.favorite_id
      favorites_items = FavoritesItemPolicy::Scope.new(context.current_user, FavoritesItem).resolve
      favorites_items = favorites_items.where(favorite_id: context.favorite_id)
    end

    body = Jbuilder.encode do |json|

      json.query do
        json.bool do

          if context.favorite_id
            json.filter do
              json.array! ['fuck'] do
                json.bool do
                  json.set! :should, favorites_items do |favorite_item|
                    json.term do
                      json.set! favorite_item.kind, favorite_item.ext_id
                    end
                  end
                end
              end
            end
          end

          json.merge! SearchString.call(search_string: search_string, search_tokens: search_tokens).object
        end
      end

      if context.group_by

        # group aggregation
        json.aggs do
          json.groups do
            json.terms do
              json.field context.group_by
              json.order do
                json.set! 'sort.sum_of_squares', 'desc'
              end
              json.size 1000
              if context.favorite_id
                favorite_ids = favorites_items.map do |fi|
                  kind = case fi.kind
                         when *GlobalHelper.feed_category_ids
                           'feed_category_id'
                         else
                           fi.kind
                         end
                  "#{kind}:#{fi.ext_id}"
                end
                json.include favorite_ids
              end
            end
            json.aggs do
              json.offers do
                json.top_hits do
                  json.size 6
                end
              end
              json.sort do
                json.extended_stats do
                  json.script do
                    json.source '_score'
                  end
                end
              end
            end
          end
        end
      end
    end

    context.object = {}.tap do |h|
      h[:body] = body
      h[:index] = ::Elastic::IndexName.offers
      if context.group_by
        h[:size] = 0
      else
        h[:size] = context.size
        h[:from] = context.from
      end
      h[:routing] = context.feed_id if context.feed_id.present?
    end
  end
end
