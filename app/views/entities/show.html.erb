<% seo.title! @entity.title %>
<% seo.description! @entity.intro %>

<% subtitle = [] %>
<% @entity.cites.select(:text_start).where.not(text_start: '').distinct.pluck(:text_start).each do |text| %>
  <% next if text.upcase == @entity.title.upcase %>
  <% next if text == '#' %>
  <% subtitle.append text %>
<% end %>

<% subtitle.append "на сайте с #{l(@entity.created_at, format: :long)}" %>

<% seo.subtitle! subtitle.join(', ') %>

<div class="tw-grid tw-grid-cols-1 tw-gap-4 tw-relative tw-z-30">
  <div class="tw-gap-4">

    <div class="tw-px-4 tw-mt-4 sm:tw-mt-0 sm:tw-px-0">
      <% if @entity.images.size > 0 %>
        <%= render(
              ReactComponent.new(name: 'Carousel',
                                 class: 'tw-w-full',
                                 props: {
                                   # items: GlobalHelper.image_hash(@entity.images).insert(1, { mime_type: 'text', text: @entity.intro }),
                                   items: GlobalHelper.image_hash(@entity.images_relations.includes(:image), %w[50 100 200 300 500 1000]),
                                   type: 'single'
                                 }))
        %>
      <% end %>
    </div>

    <div class="tw-mb-14 tw-relative tw-z-20">
    <%= render (
                 ReactComponent.new(name: 'EntitiesButtons',
                                    class: '',
                                    props: {
                                      entityId: @entity.id
                                    })
               ) %>
    </div>

    <% if @entity.topics.present? || @entity.lookups.present? %>
      <div class="tw-mt-3 tw-mx-4 sm:tw-mx-0 tw-flex tw-flex-wrap tw-gap-1">
        <% @entity.topics.each do |topic| %>
          <%= render ReactComponent.new(name: 'SingleTag',
                                        class: '',
                                        props: {
                                          tag: topic,
                                          textColor: 'tw-text-blue-800',
                                          bgColor: 'tw-bg-blue-100'
                                        }) %>
        <% end %>

        <% @entity.lookups.each do |topic| %>
          <%= render ReactComponent.new(name: 'SingleTag',
                                        class: '',
                                        props: {
                                          tag: topic,
                                          textColor: 'tw-text-pink-800',
                                          bgColor: 'tw-bg-pink-100',
                                          linkify: true
                                        }) %>
        <% end %>
      </div>
    <% end %>



    <div class="tw-mt-4 tw-mx-4 sm:tw-mx-0 tw-text-lg tw-mb-14">
      <%= @entity.intro %>
    </div>

    <% if true %>
      <% links = @entity.cites.select(:link_url).where.not(link_url: '').distinct.pluck(:link_url) %>

      <% @entity.lookups.each do |lookup| %>
        <% url = begin
                   URI(lookup.title)
                 rescue StandardError
                   next
                 end %>
        <% links.append(url) %>
      <% end %>

      <% if links.size > 0 %>
        <ul role="list" class="tw-mx-4 sm:tw-mx-0 tw-my-10 tw-grid tw-grid-cols-2 tw-gap-x-4 tw-gap-y-8 sm:tw-grid-cols-3 sm:tw-gap-x-6 lg:tw-grid-cols-4 xl:tw-gap-x-8">
          <% links.each do |link| %>
            <%= render(
              ReactComponent.new(name: 'EntitiesLink',
                                  class: '',
                                  props: {
                                  link: link
                                  })
              )
            %>
          <% end %>
        </ul>
      <% end %>
    <% end %>

  </div>
</div>

<div class="tw-relative">
  <%= render(
      ReactComponent.new(name: 'EntityPanel',
                           class: 'tw-contents',
                           props: {
                            entity: Entities::PostgresEntityPresenter.call(
                              entity: @entity
                            ).object,
                            mentionsSearchString: ''
                           })) do |component| %>

          <% if false %>
            <% component.draft do %>
              <% @draft[:mentions].each do |mention| %>
                <%= render(MentionComponent.new(mention: mention)) %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>

  <%#= paginate @mentions, window: 3 %>

  <% if false %>
    <div class="tw-space-y-5">
      <% @entity.images.each do |image| %>
        <div>
          <% case image.image.mime_type %>
          <% when *ImageUploader::IMAGE_TYPES %>
            <%= image_tag image.image.derivation(:image, 500, 500).url %>
          <% when *ImageUploader::VIDEO_TYPES %>
            <%= video_tag image.image.derivation(:video, 500, 500).url,
                          loop: 'true',
                          # width: "300",
                          # height: "300",
                          autoplay: 'true',
                          # poster_skip_pipeline: true,
                          controls: false,
                          muted: 'true'
                # autobuffer: true
                # poster: image.image.derivation(:thumbnail, 100, 100).url
            %>
          <% end %>
        </div>
      <% end %>
    </div>
  <% end %>
</div>
