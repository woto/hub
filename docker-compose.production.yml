version: "3.7"
services:

  rails:
    env_file:
      - .env
    build:
      context: .
      args:
        - RAILS_ENV=${HUB_ENV}
        - NODE_ENV=${HUB_ENV}
        - SECRET_KEY_BASE
        - PUSHGATEWAY_HOST
        - PUSHGATEWAY_PORT
        - DOMAIN_NAME
        - PUBLIC_SCHEMA
        - PUBLIC_PORT
        - PUBLIC_DOMAIN
        - INDEX_NOW_KEY
        - CHROME_EXTENSION_ID
    image: app
    command:
      [ "bundle", "exec", "rails", "s", "-b", "0.0.0.0"]
    volumes:
      - "rails_storage:/app/storage"
      - "rails_sitemaps:/app/public/sitemaps"
      - "rails_uploads:/app/public/uploads"
      - "rails_secrets:/app/config/secrets/production"
      - "./data:/app/data"
    expose:
      - 9394
      - 3000
    ports:
      - 19395:9394
      # - ${RAILS_PORT}:3000
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.rails.rule=PathPrefix(`/`)"
      # - "traefik.http.routers.rails.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.roastme_ru.rule=Host(`roastme.ru`)"
      - "traefik.http.routers.roastme_ru.entrypoints=websecure"
      - "traefik.http.routers.roastme_ru.tls.certresolver=myresolver"
    networks:
      - default
      - traefik
    restart: always

  sidekiq:
    env_file:
      - .env
    image: app
    command:
      [ "bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml" ]
    volumes:
      - "rails_storage:/app/storage"
      - "rails_sitemaps:/app/public/sitemaps"
      - "rails_uploads:/app/public/uploads"
      - "rails_secrets:/app/config/secrets/production"
      - "./data:/app/data"
    expose:
      - 9394
    ports:
      - 19394:9394
    restart: always

  telegram:
    env_file:
      - .env
    image: app
    command:
      [ "bundle", "exec", "rake", "hub:telegram" ]
    volumes:
      - "rails_storage:/app/storage"
      - "rails_sitemaps:/app/public/sitemaps"
      - "rails_uploads:/app/public/uploads"
      - "rails_secrets:/app/config/secrets/production"
      - "./data:/app/data"
    restart: always

  scrapper:
    env_file:
      - .env
    build:
      context: ./docker/scrapper
      dockerfile: Dockerfile
    # ports:
    #   - ${SCRAPPER_PORT}:4000
    restart: always

  elastic:
    env_file:
      - .env
    image: elasticsearch:8.7.0
    # ports:
    #   - ${ELASTIC_REST_PORT}:9200
    #   - ${ELASTIC_CLUSTER_PORT}:9300
    environment:
      - discovery.type=single-node
      - path.repo=/tmp
      - "ES_JAVA_OPTS=-Xms4096m -Xmx4096m"
      - xpack.security.enabled=false
      - action.destructive_requires_name=false
    volumes:
      - elastic:/usr/share/elasticsearch/data
    restart: always

#  es01:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
#    container_name: es01
#    environment:
#      - node.name=es01
#      - cluster.name=es-docker-cluster
#      - discovery.seed_hosts=192.168.1.10
#      - cluster.initial_master_nodes=es01,es02
#      - bootstrap.memory_lock=true
#      - network.host=0.0.0.0
#      - network.bind_host=0.0.0.0
#      - network.publish_host=192.168.1.2
#      - "ES_JAVA_OPTS=-Xms8g -Xmx8g"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data01:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#      - 9300:9300

  kibana:
    env_file:
      - .env
    image: kibana:8.7.0
    # ports:
    #   - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic:9200
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.kibana_roastme_ru.rule=Host(`kibana.roastme.ru`)"
      - "traefik.http.routers.kibana_roastme_ru.entrypoints=websecure"
      - "traefik.http.routers.kibana_roastme_ru.tls.certresolver=myresolver"

      - "traefik.http.middlewares.kibana-basicauth.basicauth.users=woto:$$2y$$05$$HqJi.DKUM2u10LSnEsCakuB9gjFt/CedJKDv9xG46y7RgUiuZe4bC"
      - "traefik.http.middlewares.kibana-https-chain.chain.middlewares=kibana-basicauth"
      - "traefik.http.routers.kibana_roastme_ru.middlewares=kibana-https-chain"
    restart: always


  postgres:
    env_file:
      - .env
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    # ports:
    #   - ${POSTGRES_PORT}:5432
    volumes:
      - "postgres:/var/lib/postgresql/data"
    restart: always

  redis:
    env_file:
      - .env
    image: redis
    # ports:
    #   - ${REDIS_PORT}:6379
    volumes:
      - "redis:/data"
    restart: always

  # To get into docker-compose network and for example
  # execute `docker-compose run --rm alpine sh -c "curl https://\$DOMAIN_NAME"
  # domain name passes from .env* files

#  alpine:
#    env_file:
#      - .env
#    build:
#      context: ./docker/alpine
#      dockerfile: Dockerfile
#    command: echo "Alpine image is used for debugging purposes only. Run it as `docker-compose run --rm alpine sh` to get network access to other containers."
#    stdin_open: true
#    tty: true

  imgproxy:
    image: darthsim/imgproxy:latest
    environment:
      - IMGPROXY_FALLBACK_IMAGE_PATH=/volume/image-not-found.png
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/volume/
    volumes:
      - ./docker/imgproxy:/volume/
    # ports:
    #   - ${IMGPROXY_PORT}:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.imgproxy.rule=PathPrefix(`/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM`)"
      - "traefik.http.routers.imgproxy.entrypoints=websecure"
      - "traefik.http.routers.imgproxy.tls.certresolver=myresolver"
    restart: always

  prometheus:
    image: prom/prometheus:v2.16.0
    volumes:
      - ./docker/prometheus:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - ${PROMETHEUS_PORT}:9090
    restart: always

  alertmanager:
    image: prom/alertmanager:v0.12.0
    ports:
      - 9093:9093
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    deploy:
      mode: global
    restart: always

  grafana:
    image: grafana/grafana:7.1.5
    ports:
      - ${GRAFANA_PORT}:3000
    restart: always

  pushgateway:
    image: prom/pushgateway
    ports:
      - ${PUSHGATEWAY_PORT}:9091
    restart: always

volumes:
  rails_storage:
  rails_sitemaps:
  rails_uploads:
  rails_secrets:
  redis:
  postgres:
  elastic:

networks:
  traefik:
    external: true
