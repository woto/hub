version: "3.7"

services:

  # jaeger:
  #   networks:
  #     hub:
  #       aliases:
  #         - jaeger
  #   image: jaegertracing/all-in-one:1.14
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "9411:9411"
  #   environment:
  #     - COLLECTOR_ZIPKIN_HTTP_PORT=9411
  #   labels:
  #     - "traefik.enable=true"

  #     - "traefik.http.routers.jaeger.entrypoints=websecure"
  #     - "traefik.http.routers.jaeger.tls.certresolver=myhttpchallenge"
  #     - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN_NAME}`)"

  # grafana:
  #   networks:
  #     hub:
  #       aliases:
  #         - grafana
  #   image: grafana/grafana
  #   labels:
  #     - "traefik.enable=true"

  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.tls.certresolver=myhttpchallenge"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"

  prometheus:
    networks:
      hub:
        aliases:
          - prometheus
    image: prom/prometheus
    volumes:
        - ./docker/prometheus:/etc/prometheus
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"

  # MONITORING
  netdata:
    networks:
      hub:
        aliases:
          - netdata
    image: netdata/netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.netdata.entrypoints=websecure"
      - "traefik.http.routers.netdata.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.netdata.rule=Host(`netdata.${DOMAIN_NAME}`)"

      - "traefik.http.routers.netdata.middlewares=auth-netdata"
      - "traefik.http.middlewares.auth-netdata.basicauth.users=oganer@gmail.com:$$apr1$$xm986s37$$uVHHKvvc03tLzThUZMshQ0"

  sentry:
    networks:
      hub:
        aliases:
          - sentry
    image: sentry
    env_file:
      - .env
      - .env.${HUB_ENV}
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.sentry.entrypoints=websecure"
      - "traefik.http.routers.sentry.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.sentry.rule=Host(`sentry.${DOMAIN_NAME}`)"

  sentry_cron:
    networks:
      hub:
    image: sentry
    env_file:
      - .env
      - .env.${HUB_ENV}
    command:
      run cron

  sentry_worker:
    networks:
      hub:
    image: sentry
    env_file:
      - .env
      - .env.${HUB_ENV}
    command:
      run worker

  # SENTRY DATABASE
  postgres_sentry:
    networks:
      hub:
        aliases:
          - postgres_sentry
    image: postgres
    env_file:
      - .env
      - .env.${HUB_ENV}
    volumes:
      - "postgres_sentry:/var/lib/postgresql/data"

  # FOR SENTRY
  redis_sentry:
    networks:
      hub:
        aliases:
          - redis_sentry
    image: redis

volumes:
  postgres_sentry: