version: "3.7"
services:

  traefik:
    networks:
      hub:
        aliases:
          - traefik
          - ${DOMAIN_NAME}
          - en.${DOMAIN_NAME}
          - ru.${DOMAIN_NAME}
          - zh.${DOMAIN_NAME}
    image: "traefik:v2.0"
    ports:
      - "80:80"
      - "443:443"
    expose:
      - 8082
    command:
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.metrics.address=:8082
      - --providers.docker=true
      - --api.dashboard=true
      - --metrics.prometheus=true
      # --log.level=DEBUG
      - --certificatesResolvers.myhttpchallenge.acme.email=oganer@gmail.com
      - --certificatesResolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json
      # --certificatesResolvers.myhttpchallenge.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.myhttpchallenge.acme.httpChallenge.entryPoint=web
      - --metrics.prometheus.entryPoint=metrics
      - --accesslog=true


    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN_NAME}`)"

      # https://docs.traefik.io/operations/dashboard/
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth-traefik"
      - "traefik.http.middlewares.auth-traefik.basicauth.users=oganer@gmail.com:$$apr1$$xm986s37$$uVHHKvvc03tLzThUZMshQ0"

    volumes:
      - "./docker/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  # ELASTICSEARCH
  elastic:
    networks:
      hub:
        aliases:
          - elastic
          - elasticsearch
    image: elasticsearch:7.4.0
    environment:
      - discovery.type=single-node
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.elastic.entrypoints=websecure"
      - "traefik.http.routers.elastic.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.elastic.rule=Host(`elastic.${DOMAIN_NAME}`)"

      - "traefik.http.routers.elastic.middlewares=auth-elastic"
      - "traefik.http.middlewares.auth-elastic.basicauth.users=oganer@gmail.com:$$apr1$$xm986s37$$uVHHKvvc03tLzThUZMshQ0"

    volumes:
      - elastic:/usr/share/elasticsearch/data

  # KIBANA
  kibana:
    networks:
      hub:
        aliases:
          - kibana
    image: kibana:7.4.0
    # environment:
    #   - ELASTICSEARCH_URL=http://cpa-elastic:9200
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN_NAME}`)"

      - "traefik.http.routers.kibana.middlewares=auth-kibana"
      - "traefik.http.middlewares.auth-kibana.basicauth.users=oganer@gmail.com:$$apr1$$xm986s37$$uVHHKvvc03tLzThUZMshQ0"

  # MONGODB
  mongo:
    networks:
      hub:
        aliases:
          - mongo
    image: mongo:3.6.2-jessie
    volumes:
      - mongo:/data/db

  # FEEDER
  feeder:
    networks:
      hub:
        aliases:
          - feeder
    build:
      context: ./docker/feeder
      dockerfile: Dockerfile
    env_file:
      - .env.${HUB_ENV}
    volumes:
      - feeder:/app/feeds

  # API DOCS
  swagger:
    networks:
      hub:
        aliases:
          - swagger
    image: swaggerapi/swagger-ui:v3.23.11
    environment:
      - BASE_URL=/
      - URLS=[{"name":"swagger", "url":"/project/swagger.json"}]
      - OAUTH2_REDIRECT_URL=https://${DOMAIN_NAME}/oauth2-redirect.html
    volumes:
      - ./docker/swagger:/usr/share/nginx/html/project
    labels:
      - "traefik.enable=true"

      # TODO: this settings also as an envirnment settings were changed from https://${DOMAIN_NAME}/swagger
      # to https://swagger.${DOMAIN_NAME} I think environment settings may be even simplified
      # consider this later

      - "traefik.http.routers.swagger.entrypoints=websecure"
      - "traefik.http.routers.swagger.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.swagger.rule=Host(`swagger.${DOMAIN_NAME}`)"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"

  # MAIN APPLICATION
  rails:
    networks:
      hub:
        aliases:
          - rails
    build:
      context: .
      args:
        - RAILS_ENV=${HUB_ENV}
        - NODE_ENV=${HUB_ENV}
        - DOMAIN_NAME
        - SECRET_KEY_BASE
      target: development
    env_file:
      - .env.${HUB_ENV}
    environment:
        - RAILS_ENV=${HUB_ENV}
        - NODE_ENV=${HUB_ENV}
        - DOMAIN_NAME
        - SECRET_KEY_BASE
    image: rails
    command:
      [
        "sh",
        "-c",
        "rm -f /tmp/server.pid && bin/rails s -b '0.0.0.0' --pid /tmp/server.pid",
      ]
    stdin_open: true
    tty: true
    expose:
      - 3000
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.main_domain.entrypoints=websecure"
      - "traefik.http.routers.main_domain.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.main_domain.rule=Host(`${DOMAIN_NAME}`)"

      - "traefik.http.routers.ru.entrypoints=websecure"
      - "traefik.http.routers.ru.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.ru.rule=Host(`ru.${DOMAIN_NAME}`)"

      - "traefik.http.routers.en.entrypoints=websecure"
      - "traefik.http.routers.en.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.en.rule=Host(`en.${DOMAIN_NAME}`)"

      - "traefik.http.routers.zh.entrypoints=websecure"
      - "traefik.http.routers.zh.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.zh.rule=Host(`zh.${DOMAIN_NAME}`)"

  # E2E tests
  puppeteer:
    networks:
      hub:
        aliases:
          - puppeteer
    build:
      context: .
      dockerfile: ./docker/puppeteer/Dockerfile
    ports:
      - "9229:9229"

  # MAIN DATABASE
  postgres:
    networks:
      hub:
        aliases:
          - postgres
    env_file:
      - .env.${HUB_ENV}
    image: postgres
    volumes:
      - "postgres:/var/lib/postgresql/data"

  # FOR WEBSOCKETS
  redis_cable:
    networks:
      hub:
        aliases:
          - redis_cable
    image: redis

  # FOR CACHING
  # This service may live separated per Rails application.
  # Data stored in this service should be considered as "don't be worried if it's lost"
  # because it could be retrivable from persist storages (postgres for example)
  redis_cache:
    networks:
      hub:
        aliases:
          - redis_cache
    image: redis

  # FOR OMNIAUTH
  redis_oauth:
    networks:
      hub:
        aliases:
          - redis_oauth
    image: redis

  mailcatcher:
    image: schickling/mailcatcher
    networks:
      hub:
        aliases:
          - mailcatcher
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.mailcatcher.entrypoints=websecure"
      - "traefik.http.routers.mailcatcher.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.mailcatcher.rule=Host(`mailcatcher.${DOMAIN_NAME}`)"
      - "traefik.http.services.mailcatcher.loadbalancer.server.port=1080"

networks:
  hub:

volumes:
  postgres:
  mongo:
  elastic:
  feeder:
