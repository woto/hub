version: "3.7"
services:

  traefik:
    networks:
      hub:
        aliases:
          - traefik
          - nv6.ru
          - en.nv6.ru
          - ru.nv6.ru
          - zh.nv6.ru
    image: "traefik:v2.0"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --api.insecure=true
      # --log.level=DEBUG
      - --certificatesResolvers.myhttpchallenge.acme.email=oganer@gmail.com
      - --certificatesResolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json
      # --certificatesResolvers.myhttpchallenge.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.myhttpchallenge.acme.httpChallenge.entryPoint=web
    labels:
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    volumes:
      - "./docker/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"

  # ELASTICSEARCH
  elastic:
    networks:
      hub:
        aliases:
          - elastic
          - elasticsearch
    image: elasticsearch:7.4.0
    environment:
      - discovery.type=single-node
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.elastic.entrypoints=websecure"
      - "traefik.http.routers.elastic.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.elastic.rule=Host(`elastic.nv6.ru`)"
    volumes:
      - elastic:/usr/share/elasticsearch/data

  # KIBANA
  kibana:
    networks:
      hub:
        aliases:
          - kibana
    image: kibana:7.4.0
    # environment:
    #   - ELASTICSEARCH_URL=http://cpa-elastic:9200
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.kibana.rule=Host(`kibana.nv6.ru`)"

  # MONGODB
  mongo:
    networks:
      hub:
        aliases:
          - mongo
    image: mongo:3.6.2-jessie
    volumes:
      - mongo:/data/db

  # FEEDER
  feeder:
    networks:
      hub:
        aliases:
          - feeder
    build:
      context: ./docker/feeder
      dockerfile: Dockerfile
    volumes:
      - feeder:/app/feeds

  # API DOCS
  swagger:
    networks:
      hub:
        aliases:
          - swagger
    image: swaggerapi/swagger-ui:v3.23.11
    environment:
      - BASE_URL=/swagger
      - URLS=[{"name":"swagger", "url":"/swagger/project/swagger.json"}]
      - OAUTH2_REDIRECT_URL=https://nv6.ru/swagger/oauth2-redirect.html
    volumes:
      - ./docker/swagger:/usr/share/nginx/html/project
    labels:
      - "traefik.http.routers.swagger.entrypoints=websecure"
      - "traefik.http.routers.swagger.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.swagger.rule=PathPrefix(`/swagger/`)"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"
      - "traefik.http.routers.swagger.service=swagger"

  # MAIN APPLICATION
  rails:
    networks:
      hub:
        aliases:
          - rails
    env_file:
      - .env
      - .env.${HUB_ENV}
    build: .
    image: rails
    command:
      [
        "sh",
        "-c",
        "rm -f /tmp/server.pid && bin/rails s -b '0.0.0.0' --pid /tmp/server.pid",
      ]
    stdin_open: true
    tty: true
    expose:
      - 3000
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.nv6.entrypoints=websecure"
      - "traefik.http.routers.nv6.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.nv6.rule=Host(`nv6.ru`)"

      - "traefik.http.routers.ru.entrypoints=websecure"
      - "traefik.http.routers.ru.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.ru.rule=Host(`ru.nv6.ru`)"

      - "traefik.http.routers.en.entrypoints=websecure"
      - "traefik.http.routers.en.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.en.rule=Host(`en.nv6.ru`)"

      - "traefik.http.routers.zh.entrypoints=websecure"
      - "traefik.http.routers.zh.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.zh.rule=Host(`zh.nv6.ru`)"


  # ASSETS FOR APPLICATION
  webpacker:
    networks:
      hub:
        aliases:
          - webpacker
    env_file:
      - .env
      - .env.${HUB_ENV}
    image: rails
    command: bin/webpack-dev-server
    expose:
      - 3035
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.webpacker.entrypoints=websecure"
      - "traefik.http.routers.webpacker.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.webpacker.rule=Host(`webpacker.nv6.ru`)"

  # E2E tests
  puppeteer:
    networks:
      hub:
        aliases:
          - puppeteer
    build:
      context: .
      dockerfile: ./docker/puppeteer/Dockerfile
    ports:
      - "9229:9229"
    volumes:
      - "./docker/puppeteer/tests:/tests"
      - "./docker/puppeteer/screenshots:/screenshots"
    command: "wait-for-it.sh nv6.ru:443 -- mocha --inspect=0.0.0.0 --recursive /tests"

  # MONITORING
  netdata:
    networks:
      hub:
        aliases:
          - netdata
    image: netdata/netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.netdata.entrypoints=websecure"
      - "traefik.http.routers.netdata.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.netdata.rule=Host(`netdata.nv6.ru`)"


  # MAIN DATABASE
  postgres:
    networks:
      hub:
        aliases:
          - postgres
    env_file:
      - .env
      - .env.${HUB_ENV}
    image: postgres
    volumes:
      - "postgres:/var/lib/postgresql/data"

  # FOR WEBSOCKETS
  redis_cable:
    networks:
      hub:
        aliases:
          - redis_cable
    image: redis

  # This service may live separated per Rails application.
  # Data stored in this service should be considered as "don't be worried if it's lost"
  # because it could be retrivable from persist storages (postgres for example)
  # FOR CACHING
  redis_cache:
    networks:
      hub:
        aliases:
          - redis_cache
    image: redis

  # FOR OMNIAUTH
  redis_oauth:
    networks:
      hub:
        aliases:
          - redis_oauth
    image: redis

  # FOR DEBUGGING
  # to get into docker-compose network and for example
  # execute `docker-compose run --rm alpine curl -k "https://nv6.ru"`
  alpine:
    build:
      context: ./docker/alpine
      dockerfile: Dockerfile
    networks:
      hub:
        aliases:
          - alpine
    command: echo "Alpine image is used for debugging purposes only. Run it as `docker-compose run --rm alpine sh` to get network access to other containers."
    stdin_open: true
    tty: true

  mailcatcher:
    image: schickling/mailcatcher
    networks:
      hub:
        aliases:
          - mailcatcher
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.mailcatcher.entrypoints=websecure"
      - "traefik.http.routers.mailcatcher.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.mailcatcher.rule=Host(`mailcatcher.nv6.ru`)"
      - "traefik.http.services.mailcatcher.loadbalancer.server.port=1080"

networks:
  hub:

volumes:
  postgres:
  mongo:
  elastic:
  feeder:
