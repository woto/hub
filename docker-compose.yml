version: "3.7"
services:

  elastic:
    env_file:
      - .env
    image: elasticsearch:7.4.0
    ports:
      - ${ELASTIC_REST_PORT}:9200
      - ${ELASTIC_CLUSTER_PORT}:9300
    environment:
      - discovery.type=single-node

    volumes:
      - elastic:/usr/share/elasticsearch/data

  kibana:
    env_file:
      - .env
    image: kibana:7.8.1
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic:9200

  postgres:
    env_file:
      - .env
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - "postgres:/var/lib/postgresql/data"

  redis:
    env_file:
      - .env
    image: redis
    ports:
      - ${REDIS_PORT}:6379

  mailcatcher:
    env_file:
      - .env
    image: schickling/mailcatcher
    ports:
      - ${MAILCATCHER_WEB_PORT}:1080
      - ${MAILCATCHER_SMTP_PORT}:1025

  # To get into docker-compose network and for example
  # execute `docker-compose run --rm alpine sh -c "curl https://\$DOMAIN_NAME"
  # domain name passes from .env* files

  alpine:
    env_file:
      - .env
    build:
      context: ./docker/alpine
      dockerfile: Dockerfile
    command: echo "Alpine image is used for debugging purposes only. Run it as `docker-compose run --rm alpine sh` to get network access to other containers."
    stdin_open: true
    tty: true

  imaginary:
    image: h2non/imaginary:latest
    # optionally mount a volume as local image source
    volumes:
      - imaginary:/mnt/data
    environment:
      PORT: 9000
    command: -enable-url-source -mount /mnt/data
    ports:
      - ${IMAGINARY_PORT}:9000

  prometheus:
    image: prom/prometheus:v2.16.0
    volumes:
      - ./docker/prometheus:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - ${PROMETHEUS_PORT}:9090

  grafana:
    image: grafana/grafana:7.1.5
    ports:
      - ${GRAFANA_PORT}:3000

  pushgateway:
    image: prom/pushgateway
    ports:
      - ${PUSHGATEWAY_PORT}:9091


volumes:
  postgres:
  elastic:
  feeder:
  rails_storage:
  imaginary:
