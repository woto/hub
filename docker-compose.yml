version: "3.7"
services:

#  rails:
#    env_file:
#      - .env
#    build:
#      context: .
#      args:
#        - RAILS_ENV=${HUB_ENV}
#        - NODE_ENV=${HUB_ENV}
#        - SECRET_KEY_BASE
#    image: app
#    command:
#      [ "bundle", "exec", "rails", "s", "-b", "0.0.0.0"]
#    volumes:
#      - "rails_storage:/app/storage"
#    expose:
#      - 9394
#    ports:
#      - 19395:9394
#      - ${RAILS_PORT}:3000
#
#  sidekiq:
#    env_file:
#      - .env
#    image: app
#    command:
#      [ "bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml" ]
#    volumes:
#      - "rails_storage:/app/storage"
#    expose:
#      - 9394
#    ports:
#      - 19394:9394

  elastic:
    env_file:
      - .env
    image: elasticsearch:7.9.2
    ports:
      - ${ELASTIC_REST_PORT}:9200
      - ${ELASTIC_CLUSTER_PORT}:9300
    environment:
      - discovery.type=single-node
    # volumes:
    #   - elastic:/usr/share/elasticsearch/data

#  es01:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
#    container_name: es01
#    environment:
#      - node.name=es01
#      - cluster.name=es-docker-cluster
#      - discovery.seed_hosts=192.168.1.10
#      - cluster.initial_master_nodes=es01,es02
#      - bootstrap.memory_lock=true
#      - network.host=0.0.0.0
#      - network.bind_host=0.0.0.0
#      - network.publish_host=192.168.1.2
#      - "ES_JAVA_OPTS=-Xms8g -Xmx8g"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data01:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#      - 9300:9300

  kibana:
    env_file:
      - .env
    image: kibana:7.9.2
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic:9200

  postgres:
    env_file:
      - .env
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    ports:
      - ${POSTGRES_PORT}:5432
    # volumes:
    #   - "postgres:/var/lib/postgresql/data"

  redis:
    env_file:
      - .env
    image: redis
    ports:
      - ${REDIS_PORT}:6379

  mailcatcher:
    env_file:
      - .env
    image: schickling/mailcatcher
    ports:
      - ${MAILCATCHER_WEB_PORT}:1080
      - ${MAILCATCHER_SMTP_PORT}:1025

  # To get into docker-compose network and for example
  # execute `docker-compose run --rm alpine sh -c "curl https://\$DOMAIN_NAME"
  # domain name passes from .env* files

#  alpine:
#    env_file:
#      - .env
#    build:
#      context: ./docker/alpine
#      dockerfile: Dockerfile
#    command: echo "Alpine image is used for debugging purposes only. Run it as `docker-compose run --rm alpine sh` to get network access to other containers."
#    stdin_open: true
#    tty: true

  imageproxy:
    image: willnorris/imageproxy
    command: -addr 0.0.0.0:8080
    ports:
      - ${IMAGEPROXY_PORT}:8080

#  prometheus:
#    image: prom/prometheus:v2.16.0
#    volumes:
#      - ./docker/prometheus:/etc/prometheus/
#    command:
#      - "--config.file=/etc/prometheus/prometheus.yml"
#      - "--storage.tsdb.path=/prometheus"
#    ports:
#      - ${PROMETHEUS_PORT}:9090
#
#  alertmanager:
#    image: prom/alertmanager:v0.12.0
#    ports:
#      - 9093:9093
#    volumes:
#      - ./docker/alertmanager/:/etc/alertmanager/
#    restart: always
#    command:
#      - '-config.file=/etc/alertmanager/config.yml'
#      - '-storage.path=/alertmanager'
#    deploy:
#      mode: global
#
#  grafana:
#    image: grafana/grafana:7.1.5
#    ports:
#      - ${GRAFANA_PORT}:3000
#
#  pushgateway:
#    image: prom/pushgateway
#    ports:
#      - ${PUSHGATEWAY_PORT}:9091
